version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:${CONFLUENT_DOCKER_TAG}
    hostname: zookeeper
    container_name: zookeeper
    healthcheck:
      test: echo srvr | nc zookeeper ${ZOOKEEPER_PORT} || exit 1
      retries: 20
      interval: 10s
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
    ports:
      - '${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}'

  kafka:
    image: confluentinc/cp-enterprise-kafka:${CONFLUENT_DOCKER_TAG}
    container_name: kafka
    healthcheck:
      test: [ "CMD", "/bin/kafka-topics", "--list", "--bootstrap-server=kafka:${KAFKA_PORT_INTERNAL}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:${KAFKA_PORT_INTERNAL},EXTERNAL://localhost:${KAFKA_PORT}
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: https://schema-registry:${SCHEMA_REGISTRY_PORT}
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    ports:
      - '${KAFKA_PORT}:${KAFKA_PORT}'

  kafka-connect:
    image: localbuild/connect:${DBZ_IMAGE_TAG}
    hostname: kafka-connect
    platform: linux/amd64
    container_name: kafka-connect
    build:
      context: .
      dockerfile: Dockerfile_Connect
      args:
        DBZ_USER_IMAGE_NAME: ${DBZ_USER_IMAGE_NAME}
        DBZ_IMAGE_TAG: ${DBZ_IMAGE_TAG}
    healthcheck:
      interval: 10s
      retries: 20
      test: curl --fail --silent http://kafka-connect:${KAFKA_CONNECT_PORT}/ --output /dev/null || exit 1
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      BOOTSTRAP_SERVERS: kafka:${KAFKA_PORT_INTERNAL}
      GROUP_ID: connect-cluster
      CONFIG_STORAGE_TOPIC: config-storage
      OFFSET_STORAGE_TOPIC: offset-storage
      STATUS_STORAGE_TOPIC: status-storage
      LOG_LEVEL: INFO
    ports:
      - ${KAFKA_CONNECT_PORT}:${KAFKA_CONNECT_PORT}

  mysql:
    image: mysql:8.0.35
    container_name: mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: debezium
      MYSQL_USER: mysqluser
      MYSQL_PASSWORD: mysqlpw
    ports:
      - '3306:3306'
    volumes:
      # - ./mysql-data:/var/lib/mysql:rw
      - ./mysql.conf/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./mysql.conf/init.sql:/docker-entrypoint-initdb.d/init.sql:ro

  control-center:
    image: confluentinc/cp-enterprise-control-center:${CONFLUENT_DOCKER_TAG}
    hostname: control-center
    container_name: control-center
    healthcheck:
      start_period: 10s
      interval: 10s
      retries: 20
      test: curl --fail --silent http://control-center:${CONTROL_CENTER_PORT} --output /dev/null || exit 1
    depends_on:
      kafka-connect:
        condition: service_healthy
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka:${KAFKA_PORT_INTERNAL}
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'http://kafka-connect:${KAFKA_CONNECT_PORT}'
      CONTROL_CENTER_CONNECT_HEALTHCHECK_ENDPOINT: /connectors
      # CONTROL_CENTER_SCHEMA_REGISTRY_SR1_URL: https://schema-registry:${SCHEMA_REGISTRY_PORT}
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_METRICS_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      PORT: ${CONTROL_CENTER_PORT}

    ulimits:
      nofile:
        soft: 5000
        hard: 5000
    ports:
      - ${CONTROL_CENTER_PORT}:${CONTROL_CENTER_PORT}